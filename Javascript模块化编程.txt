背景：
嵌入网页的Javascript代码越来越庞大，越来越复杂，如何使用软件工程的方法，管理网页的业务逻辑成为一个迫切的需求。
Javascript模块化编程使开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。

一、原始写法：把不同的函数（以及记录状态的变量）简单地放在一起，作为一个模块。
function m1(){
　　//...
}

function m2(){
　　//...
}
/*总结："污染"了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系*/

二、对象写法：模块写成一个对象，所有的模块成员都放到这个对象里面。
var module1 = new Object({
　　_count : 0,//私有成员会被改写
　　m1 : function (){
　　　　//...
　　},
　　m2 : function (){
　　　　//...
　　}
});
module1._count = 5;//外部代码可以直接改变内部计数器的值
/*总结：暴露所有模块成员，内部状态可以被外部改写*/


三、立即执行函数写法（Immediately-Invoked Function Expression，IIFE）：可以达到不暴露私有成员的目的
var module1 = (function(){
　　var _count = 0;
　　var m1 = function(){
　　　　//...
　　};
　　var m2 = function(){
　　　　//...
　　};
　　return {
　　　　m1 : m1,
　　　　m2 : m2
　　};
})();
console.info(module1._count); //undefined
/*总结：不暴露私有成员*/

四、放大模式：一个模块很大，必须分成几个部分；或者一个模块需要继承另一个模块
var module1 = (function (mod){
　　mod.m3 = function () {
　　　　//...
　　};
　　return mod;
})(module1);
/*总结：实现模块的拆分和继承*/

五、宽放大模式（Loose augmentation）：在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。
var module1 = ( function (mod){
　　//...
　　return mod;
})(window.module1 || {});

六、输入全局变量：模块内部最好不与程序的其他部分直接交互，使模块具备独立性；若要在模块内部调用全局变量，必须显式地将其他变量输入模块。
var module1 = (function ($, YAHOO) {
　　//...
})(jQuery, YAHOO);

七、模块的规范
目前，通行的Javascript模块规范共有两种：CommonJS和AMD，保证大家必须以同样的方式编写模块

八、CommonJS
2009年，美国程序员Ryan Dahl创造了node.js项目，将javascript语言用于服务器端编程。这标志"Javascript模块化编程"正式诞生。
前端网页程序的复杂性有限，没有模块也不是特别大的问题；但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。
在CommonJS中，有一个全局性方法require()，用于加载模块。
var math = require('math');
math.add(2, 3);

九、浏览器环境
math.add(2, 3)，在第一行require('math')之后运行，因此必须等math.js加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。
这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间

CommonJS规范不适用于浏览器环境的原因
1、缺少四个Node.js环境的变量module、exports、require、global，这可以借助Browserify、Duo等，实现将服务器端的NodeJS转化为浏览器可用的格式
2、模块都放在服务器端，浏览器需要从服务器端下载模块，若网速较慢或文件较大，浏览器处于"假死"状态。
因此，浏览器端的模块，不能采用"同步加载"（synchronous），只能采用"异步加载"（asynchronous）。这就是AMD规范诞生的背景。

十、AMD：异步模块定义(Asynchronous Module Definition)，采用异步方式加载模块，模块的加载不影响它后面语句的运行。
AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：require([module], callback);
require(['math'], function (math) {
　　math.add(2, 3);//math.add()与math模块加载不是同步的，浏览器不会发生假死。
});
主要有两个Javascript库实现了AMD规范：require.js和curl.js。


*************************Require.js的用法******************************
一、为什么要用require.js？
若浏览器要加载多个js文件
<script src="1.js"></script>
<script src="2.js"></script>
<script src="3.js"></script>
<script src="4.js"></script>
<script src="5.js"></script>
<script src="6.js"></script>
这种写法的缺点：
1、加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长
2、由于js文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的1.js要在2.js的前面）。当依赖关系很复杂的时候，代码的编写和维护都会变得困难。

require.js的诞生，就是为了解决这两个问题
1、实现js文件的异步加载，避免网页失去响应；
2、管理模块之间的依赖性，便于代码的编写和维护。

二、require.js的加载
先去官方网站下载最新版本require.js ，然后引入到网页 <script src="js/require.js" defer/*兼容IE*/ async="true" data-main="js/main.js"/*指定网页程序的主模块*/></script>

三、主模块的写法
主模块main.js依赖于其他模块，这时就要使用AMD规范定义的的require()函数。
// main.js
require(['moduleA', 'moduleB', 'moduleC']/*表示所依赖的模块*/, function (moduleA, moduleB, moduleC){/*依赖模块加载成功后的回调函数*/
　　// some code here
});

四、模块的加载
默认情况下，require.js假定这三个模块与main.js在同一个目录。若不在同一个目录，则需要通过require.config()方法对模块的加载行为进行自定义
//逐一指定路径
require.config({
　　paths: {
　　　　"jquery": "lib/jquery.min",
　　　　//"jquery": "https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min"/*也可以直接指定它的网址*/
　　　　"underscore": "lib/underscore.min",
　　　　"backbone": "lib/backbone.min"
　　}
});
//直接改变基目录（baseUrl）
require.config({
　　baseUrl: "js/lib",
　　paths: {
　　　　"jquery": "jquery.min",
　　　　"underscore": "underscore.min",
　　　　"backbone": "backbone.min"
　　}
});

五、AMD模块的写法
require.js加载的模块，必须采用AMD规范。即模块必须采用特定的define()函数来定义。
1、一个模块不依赖其他模块（假定现在有一个math.js文件，它定义了一个math模块）
// math.js
define(function (){
　　var add = function (x,y){
　　　　return x+y;
　　};
　　return {
　　　　add: add
　　};
});
加载方法如下：
// main.js
require(['math'], function (math){
　　alert(math.add(1,1));
});
2、这个模块还依赖其他模块（那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性）
define(['myLib'], function(myLib){
　　function foo(){
　　　　myLib.doSomething();
　　}
　　return {
　　　　foo : foo
　　};
});

六、加载非规范的模块
有一部分流行的函数库（比如jQuery）符合AMD规范，更多的库并不符合。
require.js能够加载非规范的模块：模块在用require()加载之前，要先用require.config()方法，定义它们的一些特征。
require.config({
　　shim: {/*shim属性，专门用来配置不兼容的模块(如underscore和backbone)*/
　　　　'underscore':{
　　　　　　exports: '_'
　　　　},
　　　　//每个模块要定义（1）exports值（输出的变量名），表明这个模块外部调用时的名称；（2）deps数组，表明该模块的依赖性。
　　　　'backbone': {
　　　　　　deps: ['underscore', 'jquery'],
　　　　　　exports: 'Backbone'
　　　　}
　　}
});

有了RequireJS，jQuery的插件可以这样定义：
shim: {
　　'jquery.scroll': {
　　　　deps: ['jquery'],
　　　　exports: 'jQuery.fn.scroll'
　　}
}


七、require.js插件
require.js还提供一系列插件，实现一些特定的功能。
1、domready插件：可以让回调函数在页面DOM结构加载完成后再运行。
require(['domready!'], function (doc){
　　// called once the DOM is ready
});
2、text和image插件：允许require.js加载文本和图片文件。
define([
　　'text!review.txt',
　　'image!cat.jpg'
　　],
　　function(review,cat){
　　　　console.log(review);
　　　　document.body.appendChild(cat);
　　}
);
3、json和mdown插件：用于加载json文件和markdown文件

更多请参考RequireJS官网：http://requirejs.org/